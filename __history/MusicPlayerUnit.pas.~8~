unit MusicPlayerUnit;

interface

Uses
    SysUtils, Windows,
  extctrls,bass,Classes,FileOperationsUnit,PathsUnit,System.Generics.Collections;
Type
    TMusicPlayer = class
        procedure PlayNext();
        procedure SetSongPaths();
        procedure Disable();
        procedure Enable();
        constructor Create(Handle:HWND);
        procedure OnTimerTick(Sender : TObject);
        public
            Channel : Hstream;
            Paths : TStringList;
            CurrentIndex : Integer;
            Timer : TTimer;
    end;

implementation

constructor TMusicPlayer.Create(Handle:HWND);
Begin
    Timer := TTimer.Create(nil);
    Timer.Enabled := false;
    Timer.Interval := 1000;
    Timer.OnTimer := EventHandlers.OnTimerTick;
    Timer.Enabled := true;
    BASS_INIT(-1,44100,0,Handle,nil);
    Paths := TStringList.Create();
    CurrentIndex := 0;
    SetSongPaths();
End;

procedure TMusicPlayer.PlayNext();
Begin
    if Paths.Count>0 then
    Begin
        if self.Channel>0 then
        Begin
            Bass_StreamFree(Channel);
        End;
        if CurrentIndex >= Paths.Count then
        Begin
            CurrentIndex := 0;
        End;
        Channel := Bass_StreamCreateFile(False,PChar(Paths[CurrentIndex]),0,0,BASS_UNICODE);
        BASS_ChannelPlay(Channel,False);
        Inc(CurrentIndex);
    End;
End;

procedure TMusicPlayer.SetSongPaths();
Var
    List : TList<String>;
    Path : String;
Begin
    List := TFileOperations.ReadFilePathsFromDirectory(TPaths.GetMusicFolder());
    Paths.Clear();
    for Path in List do
    Begin
        Paths.Add(Path);
    End;
End;

procedure TMusicPlayer.Disable();
Begin
          if self.Channel>0 then
        Begin
            Bass_StreamFree(Channel);
        End;
        Timer.Enabled:=False;
End;

procedure TMusicPlayer.Enable();
Begin
    Timer.Enabled:=True;
End;

procedure TMusicPlayer.OnTimerTick(Sender : TObject);
Var
    BytesLeft : DWord;
Begin
End;


end.
